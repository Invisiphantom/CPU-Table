$date
	Wed Dec  6 17:05:18 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module arch_tb $end
$var reg 1 ! clk $end
$scope module arch_inst $end
$var wire 1 ! clk $end
$var wire 1 " dmem_error $end
$var wire 1 # imem_error $end
$var wire 1 $ instr_valid $end
$var wire 1 % pCnd $end
$var wire 4 & pIcode [3:0] $end
$var wire 64 ' pValC [63:0] $end
$var wire 64 ( pValM [63:0] $end
$var wire 64 ) pValP [63:0] $end
$var wire 64 * valP [63:0] $end
$var wire 64 + valM [63:0] $end
$var wire 64 , valE [63:0] $end
$var wire 64 - valC [63:0] $end
$var wire 64 . valB [63:0] $end
$var wire 64 / valA [63:0] $end
$var wire 2 0 stat [1:0] $end
$var wire 64 1 rsp [63:0] $end
$var wire 64 2 rsi [63:0] $end
$var wire 64 3 rdx [63:0] $end
$var wire 64 4 rdi [63:0] $end
$var wire 64 5 rcx [63:0] $end
$var wire 64 6 rbx [63:0] $end
$var wire 64 7 rbp [63:0] $end
$var wire 64 8 rax [63:0] $end
$var wire 4 9 rB [3:0] $end
$var wire 4 : rA [3:0] $end
$var wire 64 ; r9 [63:0] $end
$var wire 64 < r8 [63:0] $end
$var wire 64 = r14 [63:0] $end
$var wire 64 > r13 [63:0] $end
$var wire 64 ? r12 [63:0] $end
$var wire 64 @ r11 [63:0] $end
$var wire 64 A r10 [63:0] $end
$var wire 1 B memWrite $end
$var wire 1 C memRead $end
$var wire 64 D memData [63:0] $end
$var wire 64 E memAddr [63:0] $end
$var wire 4 F ifun [3:0] $end
$var wire 4 G icode [3:0] $end
$var wire 2 H aluFun [1:0] $end
$var wire 64 I aluB [63:0] $end
$var wire 64 J aluA [63:0] $end
$var wire 1 K ZF $end
$var wire 1 L SF $end
$var wire 64 M PCaddress [63:0] $end
$var wire 1 N OF $end
$var wire 1 O Cnd $end
$scope module u_ALU $end
$var wire 2 P aluFun [1:0] $end
$var wire 64 Q aluB [63:0] $end
$var wire 64 R aluA [63:0] $end
$var wire 1 K ZF $end
$var wire 1 L SF $end
$var wire 1 N OF $end
$var reg 64 S valE [63:0] $end
$upscope $end
$scope module u_ALU_A $end
$var wire 64 T valC [63:0] $end
$var wire 64 U valA [63:0] $end
$var wire 4 V icode [3:0] $end
$var reg 64 W aluA [63:0] $end
$upscope $end
$scope module u_ALU_B $end
$var wire 64 X valB [63:0] $end
$var wire 4 Y icode [3:0] $end
$var reg 64 Z aluB [63:0] $end
$upscope $end
$scope module u_ALU_fun $end
$var wire 4 [ ifun [3:0] $end
$var wire 4 \ icode [3:0] $end
$var reg 2 ] aluFun [1:0] $end
$upscope $end
$scope module u_CC $end
$var wire 1 N OF $end
$var wire 1 L SF $end
$var wire 1 K ZF $end
$var wire 4 ^ ifun [3:0] $end
$var reg 1 O Cnd $end
$upscope $end
$scope module u_InstMemory $end
$var wire 64 _ valC [63:0] $end
$var wire 80 ` instruction [79:0] $end
$var wire 64 a PCaddress [63:0] $end
$var reg 4 b icode [3:0] $end
$var reg 4 c ifun [3:0] $end
$var reg 4 d rA [3:0] $end
$var reg 4 e rB [3:0] $end
$var reg 64 f valC_litend [63:0] $end
$upscope $end
$scope module u_Mem $end
$var wire 1 B memWrite $end
$var wire 1 C memRead $end
$var wire 64 g memData [63:0] $end
$var wire 64 h memAddr [63:0] $end
$var reg 64 i valM [63:0] $end
$upscope $end
$scope module u_MemAddr $end
$var wire 4 j icode [3:0] $end
$var wire 64 k valE [63:0] $end
$var wire 64 l valA [63:0] $end
$var reg 64 m memAddr [63:0] $end
$upscope $end
$scope module u_MemControl $end
$var wire 4 n icode [3:0] $end
$var reg 1 C memRead $end
$var reg 1 B memWrite $end
$upscope $end
$scope module u_MemData $end
$var wire 4 o icode [3:0] $end
$var wire 64 p valP [63:0] $end
$var wire 64 q valA [63:0] $end
$var reg 64 r memData [63:0] $end
$upscope $end
$scope module u_PC $end
$var wire 1 ! clk $end
$var wire 1 % pCnd $end
$var wire 4 s pIcode [3:0] $end
$var wire 64 t pValC [63:0] $end
$var wire 64 u pValM [63:0] $end
$var wire 64 v pValP [63:0] $end
$var reg 64 w PCaddress [63:0] $end
$upscope $end
$scope module u_PCIncre $end
$var wire 64 x PCaddress [63:0] $end
$var wire 4 y icode [3:0] $end
$var reg 64 z valP [63:0] $end
$upscope $end
$scope module u_Regs $end
$var wire 1 O Cnd $end
$var wire 1 ! clk $end
$var wire 4 { icode [3:0] $end
$var wire 64 | r10 [63:0] $end
$var wire 64 } r11 [63:0] $end
$var wire 64 ~ r12 [63:0] $end
$var wire 64 !" r13 [63:0] $end
$var wire 64 "" r14 [63:0] $end
$var wire 64 #" r8 [63:0] $end
$var wire 64 $" r9 [63:0] $end
$var wire 4 %" rA [3:0] $end
$var wire 4 &" rB [3:0] $end
$var wire 64 '" rax [63:0] $end
$var wire 64 (" rbp [63:0] $end
$var wire 64 )" rbx [63:0] $end
$var wire 64 *" rcx [63:0] $end
$var wire 64 +" rdi [63:0] $end
$var wire 64 ," rdx [63:0] $end
$var wire 64 -" rsi [63:0] $end
$var wire 64 ." rsp [63:0] $end
$var wire 64 /" valE [63:0] $end
$var wire 64 0" valM [63:0] $end
$var reg 64 1" valA [63:0] $end
$var reg 64 2" valB [63:0] $end
$upscope $end
$scope module u_Stat $end
$var wire 1 " dmem_error $end
$var wire 4 3" icode [3:0] $end
$var wire 1 # imem_error $end
$var wire 1 $ instr_valid $end
$var reg 2 4" stat [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 4"
b11 3"
bx 2"
bx 1"
bx 0"
b110000 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b100 &"
b1111 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b11 {
b1010 z
b11 y
b0 x
b0 w
b1010 v
bx u
b110000 t
b11 s
bx r
bx q
b1010 p
b11 o
b11 n
bx m
bx l
b110000 k
b11 j
bx i
bx h
bx g
b11000000000000000000000000000000000000000000000000000000000000 f
b100 e
b1111 d
b0 c
b11 b
b0 a
b110000111101000011000000000000000000000000000000000000000000000000000000000000 `
b110000 _
b0 ^
b0 ]
b11 \
b0 [
b0 Z
b11 Y
bx X
b110000 W
b11 V
bx U
b110000 T
b110000 S
b110000 R
b0 Q
b0 P
1O
0N
b0 M
0L
0K
b110000 J
b0 I
b0 H
b11 G
b0 F
bx E
bx D
0C
0B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b1111 :
b100 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b1 0
bx /
bx .
b110000 -
b110000 ,
bx +
b1010 *
b1010 )
bx (
b110000 '
b11 &
1%
z$
z#
z"
0!
$end
#5
b110000 .
b110000 X
b110000 2"
b110000 /
b110000 U
b110000 l
b110000 q
b110000 1"
b110000 1
b110000 ."
0N
0L
0K
b101000 ,
b101000 S
b101000 k
b101000 /"
b100000 '
b100000 t
b100000 -
b100000 T
b100000 _
b1000 J
b1000 R
b1000 W
b110000 I
b110000 Q
b110000 Z
b1 H
b1 P
b1 ]
b101000 E
b101000 h
b101000 m
1B
b10011 D
b10011 g
b10011 r
b10000000000000000000000000000000000000000000000000000000000000 f
b0 9
b0 e
b0 &"
b10 :
b10 d
b10 %"
b1000 &
b1000 s
b1000 G
b1000 V
b1000 Y
b1000 \
b1000 b
b1000 j
b1000 n
b1000 o
b1000 y
b1000 {
b1000 3"
b10011 )
b10011 v
b10011 *
b10011 p
b10011 z
b10000000001000000000000000000000000000000000000000000000000000000000000000110000 `
b1010 M
b1010 a
b1010 w
b1010 x
1!
#10
0!
#15
b101000 I
b101000 Q
b101000 Z
b101000 .
b101000 X
b101000 2"
b101000 /
b101000 U
b101000 l
b101000 q
b101000 1"
b10011 (
b10011 u
b10011 +
b10011 i
b10011 0"
b101000 1
b101000 ."
b110000 ,
b110000 S
b110000 k
b110000 /"
b0 '
b0 t
b0 -
b0 T
b0 _
b0 H
b0 P
b0 ]
b101000 E
b101000 h
b101000 m
1C
0B
b0 f
b1001 &
b1001 s
b1001 G
b1001 V
b1001 Y
b1001 \
b1001 b
b1001 j
b1001 n
b1001 o
b1001 y
b1001 {
b1001 3"
b100001 )
b100001 v
b100001 *
b100001 p
b100001 z
b10010000001000000010001100000000000000000000000000000000000000000000000000000000 `
b100000 M
b100000 a
b100000 w
b100000 x
1!
#20
0!
#25
b110000 1
b110000 ."
0K
b1010 ,
b1010 S
b1010 k
b1010 /"
b1010 '
b1010 t
b1010 -
b1010 T
b1010 _
b1010 J
b1010 R
b1010 W
b0 I
b0 Q
b0 Z
bx E
bx h
bx m
0C
b101000000000000000000000000000000000000000000000000000000000 f
b10 9
b10 e
b10 &"
b1111 :
b1111 d
b1111 %"
b11 &
b11 s
b11 G
b11 V
b11 Y
b11 \
b11 b
b11 j
b11 n
b11 o
b11 y
b11 {
b11 3"
b11101 )
b11101 v
b11101 *
b11101 p
b11101 z
b110000111100100000101000000000000000000000000000000000000000000000000000000000 `
b10011 M
b10011 a
b10011 w
b10011 x
1!
#30
0!
#35
b1010 3
b1010 ,"
b0 '
b0 t
b0 -
b0 T
b0 _
b0 f
b0 9
b0 e
b0 &"
b0 :
b0 d
b0 %"
b0 &
b0 s
b0 G
b0 V
b0 Y
b0 \
b0 b
b0 j
b0 n
b0 o
b0 y
b0 {
b0 3"
b11101 )
b11101 v
b11101 *
b11101 p
b11101 z
b10010000001000000010001100000000000000000000000000000000 `
b11101 M
b11101 a
b11101 w
b11101 x
1!
#36
b10 0
b10 4"
#40
0!
#45
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
