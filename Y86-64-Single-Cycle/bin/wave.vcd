$date
	Tue Dec  5 16:08:56 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module arch_tb $end
$var reg 1 ! PCrst $end
$var reg 1 " clk $end
$scope module arch_inst $end
$var wire 1 ! PCrst $end
$var wire 1 " clk $end
$var wire 64 # valP [63:0] $end
$var wire 64 $ valC [63:0] $end
$var wire 4 % rB [3:0] $end
$var wire 4 & rA [3:0] $end
$var wire 80 ' instruction [79:0] $end
$var wire 4 ( ifun [3:0] $end
$var wire 4 ) icode [3:0] $end
$var wire 64 * PCnext [63:0] $end
$var wire 64 + PCaddress [63:0] $end
$scope module u_InstDecode $end
$var wire 80 , instruction [79:0] $end
$var reg 4 - icode [3:0] $end
$var reg 4 . ifun [3:0] $end
$var reg 4 / rA [3:0] $end
$var reg 4 0 rB [3:0] $end
$var reg 64 1 valC [63:0] $end
$var reg 64 2 valP [63:0] $end
$upscope $end
$scope module u_InstMemory $end
$var wire 8 3 inst_0 [7:0] $end
$var wire 8 4 inst_1 [7:0] $end
$var wire 8 5 inst_2 [7:0] $end
$var wire 8 6 inst_3 [7:0] $end
$var wire 64 7 PCaddress [63:0] $end
$var reg 80 8 instruction [79:0] $end
$upscope $end
$scope module u_PC $end
$var wire 1 ! PCrst $end
$var wire 1 " clk $end
$var wire 64 9 PCnext [63:0] $end
$var reg 64 : PCaddress [63:0] $end
$upscope $end
$scope module u_PCUpdate $end
$var wire 64 ; PCaddress [63:0] $end
$var wire 4 < icode [3:0] $end
$var reg 64 = PCnext [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
bx ;
bx :
bx 9
bx000000000000000000000000000000000000000000000000000000000000000000000000 8
bx 7
b0 6
b1010 5
b11110010 4
b110000 3
b0 2
b0 1
b0 0
b0 /
bx .
bx -
bx000000000000000000000000000000000000000000000000000000000000000000000000 ,
bx +
bx *
bx )
bx (
bx000000000000000000000000000000000000000000000000000000000000000000000000 '
b0 &
b0 %
b0 $
b0 #
0"
1!
$end
#5
b1010 *
b1010 9
b1010 =
b0 (
b0 .
b11 )
b11 -
b11 <
b110000000000000000000000000000000000000000000000000000000000000000000000000000 '
b110000000000000000000000000000000000000000000000000000000000000000000000000000 ,
b110000000000000000000000000000000000000000000000000000000000000000000000000000 8
b0 +
b0 7
b0 :
b0 ;
1"
#10
0"
0!
#15
b10100 *
b10100 9
b10100 =
b1010 +
b1010 7
b1010 :
b1010 ;
1"
#20
0"
#25
b1 )
b1 -
b1 <
b10000000000000000000000000000000000000000000000000000000000000000000000000000 '
b10000000000000000000000000000000000000000000000000000000000000000000000000000 ,
b10000000000000000000000000000000000000000000000000000000000000000000000000000 8
b10101 *
b10101 9
b10101 =
b10100 +
b10100 7
b10100 :
b10100 ;
1"
#30
0"
#35
b10110 *
b10110 9
b10110 =
b10101 +
b10101 7
b10101 :
b10101 ;
1"
#40
0"
#45
b10111 *
b10111 9
b10111 =
b10110 +
b10110 7
b10110 :
b10110 ;
1"
#50
0"
#55
b110 )
b110 -
b110 <
b1100000000000000000000000000000000000000000000000000000000000000000000000000000 '
b1100000000000000000000000000000000000000000000000000000000000000000000000000000 ,
b1100000000000000000000000000000000000000000000000000000000000000000000000000000 8
b11001 *
b11001 9
b11001 =
b10111 +
b10111 7
b10111 :
b10111 ;
1"
#60
0"
#65
b0 )
b0 -
b0 <
b0 '
b0 ,
b0 8
b11001 *
b11001 9
b11001 =
b11001 +
b11001 7
b11001 :
b11001 ;
1"
#70
0"
#75
1"
#80
0"
#85
1"
#90
0"
#95
1"
#100
